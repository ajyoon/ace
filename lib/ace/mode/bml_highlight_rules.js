/* ***** BEGIN LICENSE BLOCK *****
 * Distributed under the BSD license:
 *
 * Copyright (c) 2012, Ajax.org B.V.
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *     * Redistributions of source code must retain the above copyright
 *       notice, this list of conditions and the following disclaimer.
 *     * Redistributions in binary form must reproduce the above copyright
 *       notice, this list of conditions and the following disclaimer in the
 *       documentation and/or other materials provided with the distribution.
 *     * Neither the name of Ajax.org B.V. nor the
 *       names of its contributors may be used to endorse or promote products
 *       derived from this software without specific prior written permission.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
 * ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED
 * WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
 * DISCLAIMED. IN NO EVENT SHALL AJAX.ORG B.V. BE LIABLE FOR ANY
 * DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
 * (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
 * LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
 * ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
 * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
 * SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
 *
 * ***** END LICENSE BLOCK ***** */

/* This file was autogenerated from /home/ayoon/projects/bml-vscode/syntaxes/bml.tmLanguage (uuid: ) */
/****************************************************************************************
 * IT MIGHT NOT BE PERFECT ...But it's a good start from an existing *.tmlanguage file. *
 * fileTypes                                                                            *
 ****************************************************************************************/

define(function(require, exports, module) {
"use strict";

var oop = require("../lib/oop");
var TextHighlightRules = require("./text_highlight_rules").TextHighlightRules;

var BMLHighlightRules = function() {
    // regexp must not have capturing parentheses. Use (?:) instead.
    // regexps are ordered -> the first match is used

    this.$rules = {
        start: [{
            include: "#body"
        }],
        "#arrow": [{
            token: "keyword.control.bml",
            regex: /->/
        }],
        "#as": [{
            token: "keyword.bml",
            regex: /\bas\b/
        }],
        "#body": [{
            include: "#escape"
        }, {
            include: "#literalBlock"
        }, {
            include: "#eval"
        }, {
            include: "#mode"
        }, {
            include: "#commands"
        }],
        "#callCommand": [{
            token: ["keyword.bml", "entity.name.function.bml"],
            regex: /(call\s+)([_$a-zA-Z\xA0-\uFFFF][_$a-zA-Z0-9\xA0-\uFFFF]*)/
        }],
        "#choiceName": [{
            token: "entity.name.function.bml",
            regex: /[@#]?\w+:?/
        }],
        "#comma": [{
            token: "keyword.control.bml",
            regex: /,/
        }],
        "#commands": [{
            token: "keyword.control.bml",
            regex: /(?<!\\)\{/,
            push: [{
                token: "keyword.control.bml",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#replacer"
            }, {
                include: "#callCommand"
            }, {
                include: "#useCommand"
            }, {
                include: "#number"
            }, {
                include: "#comma"
            }, {
                include: "#arrow"
            }, {
                include: "#choiceName"
            }]
        }],
        "#escape": [{
            token: "keyword.bml",
            regex: /\\/
        }],
        "#eval": [{
            token: [
                "keyword.bml",
                "keyword.bml",
                "keyword.control.bml"
            ],
            regex: /(?<!\\)(eval)(\s*)(\{)/,
            push: [{
                token: "keyword.control.bml",
                regex: /\}/,
                next: "pop"
            }, {
                include: "source.js"
            }, {
                defaultToken: "keyword.bml"
            }]
        }],
        "#literalBlock": [{
            token: "keyword.bml",
            regex: /(?<!\\)\[\[/,
            push: [{
                token: "keyword.bml",
                regex: /(?<!\\)\]\]/,
                next: "pop"
            }]
        }],
        "#mode": [{
            token: [
                "keyword.bml",
                "text",
                "entity.name.type.bml",
                "text",
                "keyword.control.bml"
            ],
            regex: /(?<!\\)(mode)(\s+)(\w+)(\s*)(\{)/,
            push: [{
                token: "keyword.control.bml",
                regex: /\}/,
                next: "pop"
            }, {
                include: "#rule"
            }]
        }],
        "#number": [{
            token: "constant.numeric.bml",
            regex: /\d+(?:\.\d+)?|\.\d+/
        }],
        "#regexMatcher": [{
            token: "keyword.control.bml",
            regex: /\//,
            push: [{
                token: "keyword.control.bml",
                regex: /\//,
                next: "pop"
            }, {
                token: "text",
                regex: /\//
            }, {
                defaultToken: "keyword.control.bml"
            }]
        }],
        "#replacer": [{
            token: "entity.name.type.bml",
            regex: /\(/,
            push: [{
                token: "entity.name.type.bml",
                regex: /\)/,
                next: "pop"
            }, {
                include: "#body"
            }, {
                defaultToken: "punctuation.bml"
            }],
            comment: "Since it's really important to make parens differ from braces, use some arbitrary other common scope name"
        }],
        "#rule": [{
            include: "#regexMatcher"
        }, {
            include: "#replacer"
        }, {
            include: "#callCommand"
        }, {
            include: "#number"
        }, {
            include: "#as"
        }, {
            include: "#comma"
        }],
        "#useCommand": [{
            token: ["keyword.bml", "entity.name.type.bml"],
            regex: /(use\s+)(\w+)/
        }]
    }
    
    this.normalizeRules();
};

BMLHighlightRules.metaData = {
    "$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
    name: "BML",
    scopeName: "source.bml"
}


oop.inherits(BMLHighlightRules, TextHighlightRules);

exports.BMLHighlightRules = BMLHighlightRules;
});